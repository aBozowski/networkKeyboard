#!/usr/bin/env node

var portkbdapp = require('../app');
var debug = require('debug')('untitled4:server');
var http = require('http');
var express = require('express');
var logger = require('morgan');
var createError = require('http-errors');

var port = normalizePort(process.env.PORT || '8080');
portkbdapp.set('port', port);

var server = http.createServer(portkbdapp);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port))
        return val;
    if (port >= 0)
        return port;
    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

setuptempapp = (tempapp, charcode) => {
    tempapp.get('/', function(req, res, next) {
        const options = {
            hostname: '127.0.0.1',
            port: 8080,
            path: '/internal/type',
            method: 'GET',
            headers: {
                "PortKeyboard-Forwarded-For": '' +charcode
            }
        };

        let outbound = http.request(options, bufferresponse => {
          bufferresponse.on('data', d => {
            res.send(d);
          })
        })
        outbound.on('error', error => {
            res.send(error);
        })
        outbound.end();
    });
};

var i;
for (i = 97; i < 122; i++) {
    const tempapp = express();

    tempapp.disable('etag');
    tempapp.use(logger('dev'));
    tempapp.use(express.json());
    tempapp.use(express.urlencoded({ extended: false }));
    setuptempapp(tempapp,i);

    var tempserver = http.createServer(tempapp);
    tempserver.listen(0);
    tempserver.on('error', onError);
    tempserver.on('listening', onListening);
    console.log('Character '+String.fromCharCode(i)+' listening on port ' +  tempserver.address().port);
}
